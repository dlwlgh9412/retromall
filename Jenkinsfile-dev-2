pipeline {
    agent any

    environment {
        registryUrl = 'dlwlgh9412'
        imageName = 'retromall'
        version = '0.1'
        credentialsId = 'dockerhub-id'
        workDir = "/home/ubuntu/retromall"
    }
    stages {
        stage("build jar") {
            steps {
                // 프로젝트 빌드
                sh './gradlew build -x test'
            }
        }

        stage ('build docker image') {
            steps {
                script {
                    dockerImage = docker.build("${registryUrl}/${imageName}:${version}", "--build-arg TARGET=${imageName}-${version} .")
                }
            }
        }

        stage ('tag docker image') {
            steps {
                script {
                    docker.withRegistry('https://registry.hub.docker.com', credentialsId) {
                        docker.image("${registryUrl}/${imageName}:${version}").push()
                    }
                }
            }
        }

        stage ('deploy') {
            steps {
                sshagent(credentials: ['ubuntu-server']) {
                    withCredentials([usernamePassword(credentialsId: credentialsId, usernameVariable: 'DOCKER_USERNAME', passwordVariable: 'DOCKER_PASSWORD')]) {
                        sh "docker login -u ${DOCKER_USERNAME} -p ${DOCKER_PASSWORD}"
                        sh "docker pull ${registryUrl}/${imageName}:${version}"
                        script {
                            dir(workspaceDir) {
                                sh "sh dev.sh ${imageName} ${version}"
                            }
                        }
                    }
                }
            }
        }

        // stage ('deploy') {
        //     steps {
        //         // 원격 서버에 파일 전송
        //         sshPublisher(
        //             continueOnError: true,
        //             failOnError: false,
        //             publishers: [
        //                 sshPublisherDesc(
        //                     configName: 'ubuntu-server',
        //                     transfers: [
        //                         // sshTransfer(
        //                         //     sourceFiles: 'init.sql',
        //                         //     execCommand: "cd ${env.REMOTE_WORK_DIR} && chmod +rwx init.sql && cp init.sql ${env.REMOTE_PATH}"
        //                         // ),
        //                         sshTransfer(
        //                             // sourceFiles: "build/libs/${env.PROJECT_NAME}-${env.PROJECT_VERSION}.jar",
        //                             // removePrefix: 'build/libs/',
        //                             execCommand: "cd ${workDir} && chmod +x dev.sh && sh dev.sh ${imageName} ${version}"
        //                         )
        //                     ]
        //                 )
        //             ]
        //         )
        //     }
        // }
    }
}